#!/bin/sh

day=day$1
command=$2

[ -z "$command" ] && command=run

check_day () {
    if [ -z "$day" ]; then
        echo "day require"
        exit 1
    fi
}

case "$command" in
    stub) check_day
          if [ ! -d "$day" ]; then
              mkdir $day
              ( cat <<EOF
let () =
  print_endline ("Part 1: " ^ One.run ());
  print_endline ("Part 2: " ^ Two.run ())
EOF
              ) >> $day/${day}.ml
              ( cat <<EOF
(executable
 (name $day)
 (libraries lib))
EOF
              ) >> $day/dune

              for x in one two; do
                  ( cat <<EOF
let run () =
  let _ = Lib.In_channel.read_lines "${day}/test" in
  "unimplemented"
EOF
                  ) >> $day/${x}.ml
              done
              touch $day/test $day/instructions.troff $day/input
          fi
          ;;

    clean)
        dune clean ;;

    doc)
        9 tbl $day/instructions.troff | 9 troff -ms | 9 tr2post | open -a Preview -f ;;

    *) check_day        
        dune build
        echo "  >> $day"
        exe="$day/${day}.exe"
        if [ -f "_build/default/$exe" ]; then
            dune exec $exe
        fi
        ;;
esac
